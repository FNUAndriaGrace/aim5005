reticulate::repl_python()
import numpy as np
from typing import List, Tuple
### YOU MANY NOT ADD ANY MORE IMPORTS (you may add more typing imports)
class MinMaxScaler:
def __init__(self):
self.minimum = None
self.maximum = None
def _check_is_array(self, x:np.ndarray) -> np.ndarray:
"""
Try to convert x to a np.ndarray if it'a not a np.ndarray and return. If it can't be cast raise an error
"""
if not isinstance(x, np.ndarray):
x = np.array(x)
assert isinstance(x, np.ndarray), "Expected the input to be a list"
return x
def fit(self, x:np.ndarray) -> None:
x = self._check_is_array(x)
self.minimum=x.min(axis=0)
self.maximum=x.max(axis=0)
def transform(self, x:np.ndarray) -> list:
"""
MinMax Scale the given vector
"""
x = self._check_is_array(x)
diff_max_min = self.maximum - self.minimum
# TODO: There is a bug here... Look carefully!
return (x-self.minimum )/ (self.maximum-self.minimum)
def fit_transform(self, x:list) -> np.ndarray:
x = self._check_is_array(x)
self.fit(x)
return self.transform(x)
class StandardScaler:
def __init__(self):
self.mean = None
self.std = None
def fit(self, X):
self.mean = np.mean(X, axis=0)
self.std = np.std(X, axis=0)
def transform(self, X):
return (X - self.mean) / self.std
def fit_transform(self, X):
self.fit(X)
return self.transform(X)
import numpy as np
from typing import List, Tuple
### YOU MANY NOT ADD ANY MORE IMPORTS (you may add more typing imports)
class MinMaxScaler:
def __init__(self):
self.minimum = None
self.maximum = None
def _check_is_array(self, x:np.ndarray) -> np.ndarray:
"""
Try to convert x to a np.ndarray if it'a not a np.ndarray and return. If it can't be cast raise an error
"""
if not isinstance(x, np.ndarray):
x = np.array(x)
assert isinstance(x, np.ndarray), "Expected the input to be a list"
return x
def fit(self, x:np.ndarray) -> None:
x = self._check_is_array(x)
self.minimum=x.min(axis=0)
self.maximum=x.max(axis=0)
def transform(self, x:np.ndarray) -> list:
"""
MinMax Scale the given vector
"""
x = self._check_is_array(x)
diff_max_min = self.maximum - self.minimum
# TODO: There is a bug here... Look carefully!
return (x-self.minimum )/ (self.maximum-self.minimum)
def fit_transform(self, x:list) -> np.ndarray:
x = self._check_is_array(x)
self.fit(x)
return self.transform(x)
class StandardScaler:
def __init__(self):
self.mean = None
self.std = None
def fit(self, X):
self.mean = np.mean(X, axis=0)
self.std = np.std(X, axis=0)
def transform(self, X):
return (X - self.mean) / self.std
def fit_transform(self, X):
self.fit(X)
return self.transform(X)
import numpy as np
from typing import List, Tuple
### YOU MANY NOT ADD ANY MORE IMPORTS (you may add more typing imports)
class MinMaxScaler:
def __init__(self):
self.minimum = None
self.maximum = None
def _check_is_array(self, x:np.ndarray) -> np.ndarray:
"""
Try to convert x to a np.ndarray if it'a not a np.ndarray and return. If it can't be cast raise an error
"""
if not isinstance(x, np.ndarray):
x = np.array(x)
assert isinstance(x, np.ndarray), "Expected the input to be a list"
return x
def fit(self, x:np.ndarray) -> None:
x = self._check_is_array(x)
self.minimum=x.min(axis=0)
self.maximum=x.max(axis=0)
def transform(self, x:np.ndarray) -> list:
"""
MinMax Scale the given vector
"""
x = self._check_is_array(x)
diff_max_min = self.maximum - self.minimum
# TODO: There is a bug here... Look carefully!
return (x-self.minimum )/ (self.maximum-self.minimum)
def fit_transform(self, x:list) -> np.ndarray:
x = self._check_is_array(x)
self.fit(x)
return self.transform(x)
class StandardScaler:
def __init__(self):
self.mean = None
self.std = None
def fit(self, X):
self.mean = np.mean(X, axis=0)
self.std = np.std(X, axis=0)
def transform(self, X):
return (X - self.mean) / self.std
def fit_transform(self, X):
self.fit(X)
return self.transform(X)
import numpy as np
from typing import List, Tuple
### YOU MANY NOT ADD ANY MORE IMPORTS (you may add more typing imports)
class MinMaxScaler:
def __init__(self):
self.minimum = None
self.maximum = None
def _check_is_array(self, x:np.ndarray) -> np.ndarray:
"""
Try to convert x to a np.ndarray if it'a not a np.ndarray and return. If it can't be cast raise an error
"""
if not isinstance(x, np.ndarray):
x = np.array(x)
assert isinstance(x, np.ndarray), "Expected the input to be a list"
return x
def fit(self, x:np.ndarray) -> None:
x = self._check_is_array(x)
self.minimum=x.min(axis=0)
self.maximum=x.max(axis=0)
def transform(self, x:np.ndarray) -> list:
"""
MinMax Scale the given vector
"""
x = self._check_is_array(x)
diff_max_min = self.maximum - self.minimum
# TODO: There is a bug here... Look carefully!
return (x-self.minimum )/ (self.maximum-self.minimum)
def fit_transform(self, x:list) -> np.ndarray:
x = self._check_is_array(x)
self.fit(x)
return self.transform(x)
class StandardScaler:
def __init__(self):
self.mean = None
self.std = None
def fit(self, X):
self.mean = np.mean(X, axis=0)
self.std = np.std(X, axis=0)
def transform(self, X):
return (X - self.mean) / self.std
def fit_transform(self, X):
self.fit(X)
return self.transform(X)
from typing import List, Tuple
### YOU MANY NOT ADD ANY MORE IMPORTS (you may add more typing imports)
class MinMaxScaler:
def __init__(self):
self.minimum = None
self.maximum = None
def _check_is_array(self, x:np.ndarray) -> np.ndarray:
"""
Try to convert x to a np.ndarray if it'a not a np.ndarray and return. If it can't be cast raise an error
"""
if not isinstance(x, np.ndarray):
x = np.array(x)
assert isinstance(x, np.ndarray), "Expected the input to be a list"
return x
def fit(self, x:np.ndarray) -> None:
x = self._check_is_array(x)
self.minimum=x.min(axis=0)
self.maximum=x.max(axis=0)
def transform(self, x:np.ndarray) -> list:
"""
MinMax Scale the given vector
"""
x = self._check_is_array(x)
diff_max_min = self.maximum - self.minimum
# TODO: There is a bug here... Look carefully!
return (x-self.minimum )/ (self.maximum-self.minimum)
def fit_transform(self, x:list) -> np.ndarray:
x = self._check_is_array(x)
self.fit(x)
return self.transform(x)
class StandardScaler:
def __init__(self):
self.mean = None
self.std = None
def fit(self, X):
self.mean = np.mean(X, axis=0)
self.std = np.std(X, axis=0)
def transform(self, X):
return (X - self.mean) / self.std
def fit_transform(self, X):
self.fit(X)
return self.transform(X)
from unittest.case import TestCase
### TO NOT MODIFY EXISTING TESTS
class TestFeatures(TestCase):
def test_initialize_min_max_scaler(self):
# Test code for MinMaxScaler initialization...
pass
def test_min_max_fit(self):
# Test code for MinMaxScaler fit method...
pass
def test_min_max_scaler(self):
# Test code for MinMaxScaler transform method...
pass
def test_min_max_scaler_single_value(self):
# Test code for MinMaxScaler transform method with single value...
pass
def test_standard_scaler_init(self):
# Test code for StandardScaler initialization...
pass
def test_standard_scaler_get_mean(self):
# Test code for StandardScaler fit method and mean computation...
pass
def test_standard_scaler_transform(self):
# Test code for StandardScaler transform method...
pass
def test_standard_scaler_single_value(self):
# Test code for StandardScaler transform method with single value...
pass
# Custom test for StandardScaler with custom dataset
def test_standard_scaler_custom_data(self):
# Define a custom dataset
data = [[1, 2], [3, 4], [5, 6]]
# Define the expected result after transformation
expected = np.array([[-1.22474487, -1.22474487],
[ 0.        ,  0.        ],
[ 1.22474487,  1.22474487]])
# Initialize StandardScaler
scaler = StandardScaler()
# Fit the scaler to the data
scaler.fit(data)
# Transform the data using the scaler
result = scaler.transform(data)
# Assert that the result matches the expected values
assert np.allclose(result, expected), "Scaler transform does not return expected values. Expected: {}, Got: {}".format(expected, result)
if __name__ == '__main__':
unittest.main()
import numpy as np
from typing import List, Tuple
class MinMaxScaler:
def __init__(self):
self.minimum = None
self.maximum = None
def _check_is_array(self, x:np.ndarray) -> np.ndarray:
if not isinstance(x, np.ndarray):
x = np.array(x)
assert isinstance(x, np.ndarray), "Expected the input to be a list"
return x
def fit(self, x:np.ndarray) -> None:
x = self._check_is_array(x)
self.minimum = x.min(axis=0)
self.maximum = x.max(axis=0)
def transform(self, x:np.ndarray) -> list:
x = self._check_is_array(x)
diff_max_min = self.maximum - self.minimum
return (x - self.minimum) / (self.maximum - self.minimum)
def fit_transform(self, x:list) -> np.ndarray:
x = self._check_is_array(x)
self.fit(x)
return self.transform(x)
class StandardScaler:
def __init__(self):
self.mean = None
self.std = None
def fit(self, x: np.ndarray) -> None:
self.mean = np.mean(x, axis=0)
self.std = np.std(x, axis=0)
def transform(self, x: np.ndarray) -> np.ndarray:
return (x - self.mean) / self.std
import numpy as np
from typing import List, Tuple
class MinMaxScaler:
def __init__(self):
self.minimum = None
self.maximum = None
def _check_is_array(self, x:np.ndarray) -> np.ndarray:
if not isinstance(x, np.ndarray):
x = np.array(x)
assert isinstance(x, np.ndarray), "Expected the input to be a list"
return x
def fit(self, x:np.ndarray) -> None:
x = self._check_is_array(x)
self.minimum = x.min(axis=0)
self.maximum = x.max(axis=0)
def transform(self, x:np.ndarray) -> list:
x = self._check_is_array(x)
diff_max_min = self.maximum - self.minimum
return (x - self.minimum) / (self.maximum - self.minimum)
def fit_transform(self, x:list) -> np.ndarray:
x = self._check_is_array(x)
self.fit(x)
return self.transform(x)
class StandardScaler:
def __init__(self):
self.mean = None
self.std = None
def fit(self, x: np.ndarray) -> None:
self.mean = np.mean(x, axis=0)
self.std = np.std(x, axis=0)
def transform(self, x: np.ndarray) -> np.ndarray:
return (x - self.mean) / self.std
reticulate::repl_python()
from aim5005.features import MinMaxScaler, StandardScaler
import numpy as np
import unittest
from unittest.case import TestCase
### TO NOT MODIFY EXISTING TESTS
class TestFeatures(TestCase):
def test_initialize_min_max_scaler(self):
scaler = MinMaxScaler()
assert isinstance(scaler, MinMaxScaler), "scaler is not a MinMaxScaler object"
def test_min_max_fit(self):
scaler = MinMaxScaler()
data = [[-1, 2], [-0.5, 6], [0, 10], [1, 18]]
scaler.fit(data)
assert (scaler.maximum == np.array([1., 18.])).all(), "scaler fit does not return maximum values [1., 18.] "
assert (scaler.minimum == np.array([-1., 2.])).all(), "scaler fit does not return maximum values [-1., 2.] "
def test_min_max_scaler(self):
data = [[-1, 2], [-0.5, 6], [0, 10], [1, 18]]
expected = np.array([[0., 0.], [0.25, 0.25], [0.5, 0.5], [1., 1.]])
scaler = MinMaxScaler()
scaler.fit(data)
result = scaler.transform(data)
assert (result == expected).all(), "Scaler transform does not return expected values. All Values should be between 0 and 1. Got: {}".format(result.reshape(1,-1))
def test_min_max_scaler_single_value(self):
data = [[-1, 2], [-0.5, 6], [0, 10], [1, 18]]
expected = np.array([[1.5, 0.]])
scaler = MinMaxScaler()
scaler.fit(data)
result = scaler.transform([[2., 2.]])
assert (result == expected).all(), "Scaler transform does not return expected values. Expect [[1.5 0. ]]. Got: {}".format(result)
def test_standard_scaler_init(self):
scaler = StandardScaler()
assert isinstance(scaler, StandardScaler), "scaler is not a StandardScaler object"
def test_standard_scaler_get_mean(self):
scaler = StandardScaler()
data = [[0, 0], [0, 0], [1, 1], [1, 1]]
expected = np.array([0.5, 0.5])
scaler.fit(data)
assert (scaler.mean == expected).all(), "scaler fit does not return expected mean {}. Got {}".format(expected, scaler.mean)
def test_standard_scaler_transform(self):
scaler = StandardScaler()
data = [[0, 0], [0, 0], [1, 1], [1, 1]]
expected = np.array([[-1., -1.], [-1., -1.], [1., 1.], [1., 1.]])
scaler.fit(data)
result = scaler.transform(data)
self.assertTrue(np.array_equal(result, expected), "Scaler transform does not return expected values.")
def test_standard_scaler_single_value(self):
data = [[0, 0], [0, 0], [1, 1], [1, 1]]
expected = np.array([[3., 3.]])
scaler = StandardScaler()
scaler.fit(data)
result = scaler.transform([[2., 2.]])
assert (result == expected).all(), "Scaler transform does not return expected values. Expect {}. Got: {}".format(expected.reshape(1,-1), result.reshape(1,-1))
def test_standard_scaler_custom(self):
data = np.array([[1, 2], [3, 4], [5, 6]])
expected = (data - np.mean(data, axis=0)) / np.std(data, axis=0)
scaler = StandardScaler()
scaler.fit(data)
result = scaler.transform(data)
self.assertTrue(np.allclose(result, expected), "StandardScaler did not properly standardize the data.")
if __name__ == '__main__':
unittest.main()
reticulate::source_python('C:/Users/acer/Desktop/aim5005/aim5005/features.py')
